// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String        @default("USER")
  Club          Club?         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId        String?
  Reservation   Reservation[]
  createdAt     DateTime      @default(now())

  @@index([clubId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- end of Next auth models

model Reservation {
  id            String   @id @unique @default(cuid())
  startTime     DateTime
  endTime       DateTime
  court         Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  courtId       String
  userId        String?
  overwriteName String?
  createdAt     DateTime @default(now())

  @@index([courtId])
  @@index([userId])
}

model Court {
  id          String        @id @unique @default(cuid())
  name        String
  indoor      Boolean?
  surface     String?
  beginTime   BeginTime?    @default(BOTH)
  Reservation Reservation[]
  Club        Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      String

  @@unique([name, clubId])
  @@index([clubId])
}

model Club {
  id             String       @id @unique @default(cuid())
  name           String       @unique
  courts         Court[]
  imageSrc       String?
  logoSrc        String?
  Admin          User[]
  clubSettings   ClubSettings @relation(fields: [clubSettingsId], references: [id])
  clubSettingsId String       @unique
}

model ClubSettings {
  id                   String  @id @unique @default(cuid())
  description          String?
  club                 Club?
  firstBookableHour    Int     @default(8)
  firstBookableMinute  Int     @default(0)
  lastBookableHour     Int     @default(22)
  lastBookableMinute   Int     @default(0)
  daysInThePastVisible Int     @default(2)
  daysInFutureVisible  Int     @default(7)
}

enum BeginTime {
  HOUR
  HALFHOUR
  BOTH
}

enum Role {
  ADMIN
  USER
}
