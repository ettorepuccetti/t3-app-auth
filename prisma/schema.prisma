generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" //must start with `file:`
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("USER")
  clubId        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  accounts      Account[]
  Reservation   Reservation[]
  sessions      Session[]
  Club          Club?         @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@index([clubId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id                     String                @id @unique @default(cuid())
  startTime              DateTime
  endTime                DateTime
  courtId                String
  userId                 String?
  overwriteName          String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  recurrentReservationId String?
  recurrentReservation   RecurrentReservation? @relation(fields: [recurrentReservationId], references: [id], onDelete: Cascade)
  user                   User?                 @relation(fields: [userId], references: [id])
  court                  Court                 @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@index([courtId])
  @@index([userId])
  @@index([recurrentReservationId])
}

model RecurrentReservation {
  id           String        @id @unique @default(cuid())
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime      @default(now())
  reservations Reservation[]
}

model Court {
  id          String        @id @unique @default(cuid())
  name        String
  indoor      Boolean?
  surface     String?
  beginTime   String        @default("BOTH")
  clubId      String
  Club        Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  Reservation Reservation[]

  @@unique([name, clubId])
  @@index([clubId])
}

model Club {
  id             String       @id @unique @default(cuid())
  name           String       @unique
  imageSrc       String?
  logoSrc        String?
  clubSettingsId String       @unique
  mail           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  Address        Address?
  clubSettings   ClubSettings @relation(fields: [clubSettingsId], references: [id])
  courts         Court[]
  PhoneNumber    PhoneNumber?
  Admin          User[]
}

model PhoneNumber {
  id             String @id @unique @default(cuid())
  number         String
  nationalPrefix String
  clubId         String @unique
  Club           Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@index([clubId])
}

model Address {
  id          String  @id @unique @default(cuid())
  street      String
  number      String?
  zipCode     String
  city        String
  country     String
  countryCode String
  clubId      String  @unique
  Club        Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@index([clubId])
}

model ClubSettings {
  id                    String    @id @unique @default(cuid())
  description           String?
  firstBookableHour     Int       @default(8)
  firstBookableMinute   Int       @default(0)
  lastBookableHour      Int       @default(22)
  lastBookableMinute    Int       @default(0)
  daysInThePastVisible  Int       @default(2)
  daysInFutureVisible   Int       @default(7)
  maxReservationPerUser Int       @default(5)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  hoursBeforeCancel     Int       @default(4)
  club                  Club?
}
